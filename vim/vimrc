"Mise en place de la syntaxe
" en cours d'integration
" http://stevelosh.com/blog/2010/09/coming-home-to-vim/#rainbow-parentheses 
"
filetype off " see pathogen doc : 
"Load pathogen
call pathogen#infect()

" pas compitable avec vi
set nocompatible
filetype plugin indent on

syntax on
" pratique sur des machine puissance
set ttyfast

"""""""
" :ai indent automatique pour tous
set autoindent

" gestion des tabulation par défaut
" :ts
set tabstop=2
set softtabstop=2
set shiftwidth=2
"set 
set expandtab

set encoding=utf-8
set scrolloff=3

""" recherche
set smartcase           " Do smart case matching
set incsearch           " Incremental search
set ignorecase          " Do case insensitive matching
set hlsearch            " hihg light the research

set hidden              " permet ouvrir un autre buffer sans enregistrer les modif de suite

set history=500

"" backup
set backup
set backupdir=~/tmp/vim
set bex=.bak


let maplocalleader = "!"

"" GUI
set background=dark
" Le choix des couleurs
if has('gui_running')
  " choix du theme 
  " http://www.cs.cmu.edu/~maverick/VimColorSchemeTest/ has examples and
  " downloads for the colorschemes on vim.org
  colorscheme solarized

  " changer de themes en fonction du mode .... 
  " au InsertEnter * :colo oceandeep_red
  " au InsertLeave * :colo oceandeep

  " choix de la police
  "set guifont=MonoSpace\ 10
  set guifont=Ubuntu\ Mono\ for\ Powerline\ 12

  " surligne la ligne courrante
   set cursorline

  " affichage des lignes
  set number
  " 5 cols utilisées
  set numberwidth=5

  " pas d'éléments sur la gui useless...
  set guioptions-=m
  set guioptions-=T
  set guioptions-=l
  set guioptions-=L
  set guioptions-=r
  set guioptions-=R

  "" affiche les tab etc...
  " tab : tabulations
  " trail : espace en fin de ligne
  " set list listchars=tab:>-,eol:¶
  set list listchars=tab:>-,eol:¶,extends:>,precedes:<,trail:-

  set foldmethod=syntax
  set foldenable
  set foldcolumn=5
  set foldlevel=100 " on ne veut pas que tout soit fermer à chaque fois

else
  " sans gui
  set t_Co=256
  "colorscheme xoria256
endif

if &t_Co == 256
  let g:solarized_termcolors=256
  let g:solarized_termtrans=1
  let g:solarized_degrade=0
  let g:solarized_contrast="normal"
  colorscheme solarized
" colorscheme xoria256
endif

"" Edition
" pas de coupure de ligne 
set nowrap 
" affiche les '{,} (,), [,]' qui correspondent
set showmatch

" Alertes
" pas d'alerte visuelle
set visualbell t_vb=


""" Interface : barre de tache
" affiche toujours la lligne de status
" a revoir
set ruler
"set rulerformat=%20(%4l,%c%V\ %p%%%)

"set statusline=%t%m%r%h\ %w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [FENC=%{&fileencoding}]\ [ASCII=\%03.3b]\ [HEX=\%02.2B]\ [POS=%04l,%04v]\ [%3p%%]\ [LEN=%L]
" see powerline
set ls=2 


" affiche les commandes
set showcmd
" affiche le mode courant INSERT, VISUAL, COMMAND ...
set showmode
" Active le menu pour le menu dans la bar en bas
set wildmenu
set wildmode=list:longest


set laststatus=2
set relativenumber
set undofile

let mapleader = ","

" gestion des fichiers
"
"filetype plugin indent on

if has("autocmd")
  "
  " Voir gestion des type de fichiers dans ~/.vim/ftdetect/moa.vim

  " affiche les espaces en fin de ligne
  au Syntax * syn match Error /\s\+$/

  " réouverture des fichiers à la même position
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
     \| exe "normal g'\"" | endif

  " fichier C/C++

  " fichier python
  " au FileType python set noexpandtab tabstop=4 softtabstop=4 shiftwidth=4 foldmethod=indent
  let g:python_highlight_builtins=1
  let g:python_highlight_exceptions=1
  let g:python_highlight_string_formatting=1
  let g:python_highlight_string_format=1
  let g:python_highlight_string_templates=1
  let g:python_highlight_indent_errors=1
  let g:python_highlight_space_errors=1
  let g:python_highlight_doctests=1
  let g:python_highlight_all=1

  " fichier Make
  au FileType make set noexpandtab shiftwidth=4

  " fichier VIMRC
  au FileType vim set foldmethod=indent foldcolumn=1

  " fichiers R
  au BufNewFile,BufRead *.R,*.r set guioptions+=m
  au BufNewFile,BufRead *.r,*.R set ft=r

  " LISP
  au BufNewFile,BufRead *.scm set ft=lisp
  au BufNewFile,BufRead *.lsh set ft=lisp
  au BufNewFile,BufRead *.kml set ft=lisp

  " fichier tex/mail
  au FileType mail,tex set textwidth=72
  au FileType tex set fenc=latin1 spell spelllang=fr

  " reconnaissance des fichiers
  au BufNewFile,BufRead *.conf set ft=dosini
  au BufNewFile,BufRead *.conf.ini set ft=dosini

  " LaTeX settings
  au BufNewFile,BufRead *.ldf,*.dtx,*.ins set ft=tex

  " PHP3
  au BufNewFile,BufRead *.incl set ft=php

  " KML
  au BufNewFile,BufRead *.kml set ft=lush
  au BufNewFile,BufRead *.lsh set ft=lush

  
  " CPP
  au BufNewFile,BufRead *.cpp,*.hpp,*.mq4 set ft=cpp
   

  au BufNewFile,BufRead *.nw set ft=noweb
  let noweb_backend="tex"
  let noweb_language="ocaml"
  let noweb_fold_code=1

  " automatically delete trailing DOS-returns and trailing whitespaces
  autocmd BufWritePre *.c,*.h,*.y,*.yy,*.l,*.ll,*.C,*.cpp,*.hh,*.cc,*.hxx,*.cxx,*.hpp,*.java,*.rb,*.py,*.m4,*.pl,*.pm,*.js silent! %s/[\r \t]\+$//

endif


" Mapping
:nmap <C-S-tab> :wincmd p<cr>
:nmap <C-tab> :wincmd w<cr>
:map <C-S-tab> :wincmd p<cr>
:map <C-tab> :wincmd w<cr>
:imap <C-S-tab> <ESC>:wincmd p<cr>i
:imap <C-tab> <ESC>:wincmd w<cr>i

let c_gnu=1               " Highlight GNU gcc specific items ...
let c_space_errors=1      " ... and trailing spaces before a <Tab>

" for the TOhtml command
let g:html_use_css = 1
let g:html_use_encoding = "utf8"
let g:use_xhtml = 1


""""""""""""""""""""""""""""""
" From an idea by Michael Naumann
function! VisualSearch(direction) range
  let l:saved_reg = @"
  execute "normal! vgvy"
  let l:pattern = escape(@", '\\/.*$^~[]')
  let l:pattern = substitute(l:pattern, "\n$", "", "")
  if a:direction == 'b'
    execute "normal ?" . l:pattern . "^M"
  else
    execute "normal /" . l:pattern . "^M"
  endif
  let @/ = l:pattern
  let @" = l:saved_reg
endfunction

"Basically you press * or # to search for the current selection !! Really useful
vnoremap <silent> * :call VisualSearch('f')<CR>
vnoremap <silent> # :call VisualSearch('b')<CR>


set magic

let vimtdir=$HOME . '/tmp'
let &viminfo="'20," . '%,n' . vimtdir . '/.viminfo'

"------------------------------------------------------------------------------
" Local settings.
"------------------------------------------------------------------------------

" Source a local configuration file if available.
if filereadable(expand("~/.vim/vimrc.local"))
  source ~/.vim/vimrc.local
endif


" Reselect visual block after indent:
vnoremap < <gv 
vnoremap > >gv 
"
" " Make Y behave like other capitals
nnoremap Y y$
"
" " Force Saving Files that Require Root Permission
cmap w!! %!sudo tee > /dev/null %


"maximize vim at startup 
"http://ubuntuguide.net/get-gvim-start-in-maximized-window-in-ubuntu-gnome
function Maximize_Window()
  silent !wmctrl -r :ACTIVE: -b add,maximized_vert,maximized_horz
endfunction

if &loadplugins
  source $HOME/.vim/vimrc_plugins
endif
